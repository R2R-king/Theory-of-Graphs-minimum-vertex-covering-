import matplotlib.pyplot as plt
import networkx as nx
from networkx.algorithms import bipartite
from collections import deque

# Класс для представления graphического объекта
class Graph:

    def __init__(self, edges=None, n=0):
        # Общее количество узлов в Graph
        self.n = n

        # Список списков для представления списка смежности
        self.adjList = [[] for _ in range(n)]

        # добавляет ребра в неориентированный graph
        for (src, dest) in edges:
            # добавляет ребро от источника к месту назначения
            self.adjList[src].append(dest)

            # добавляет ребро от пункта назначения к источнику
            self.adjList[dest].append(src)

# Выполнить BFS на Graph, начиная с вершины `v`
def isBipartite(graph):
    # запускается с любого узла, так как graph связный и ненаправленный
    v = 0

    # для отслеживания обнаружена вершина или нет
    discovered = [False] * graph.n

    # хранит уровень каждой вершины в BFS
    level = [None] * graph.n

    # пометить исходную вершину как обнаруженную и установить ее уровень на 0
    discovered[v] = True
    level[v] = 0

    # создает queue для выполнения BFS и ставит в queue исходную вершину
    q = deque()
    q.append(v)

    # Цикл # до тех пор, пока queue не станет пустой
    while q:

        # удалить передний узел из очереди и распечатать его
        v = q.popleft()

        # делаем для каждого ребра (v, u)
        for u in graph.adjList[v]:
            # , если вершина `u` исследуется впервые
            if not discovered[u]:
                # пометить как обнаруженный
                discovered[u] = True

                # устанавливает уровень на один больше, чем уровень родительского узла
                level[u] = level[v] + 1

                # Вершина постановки в queue
                q.append(u)

            # , если вершина уже обнаружена и
            # вершины `u` и `v` совпадают, то
            # Graph # содержит нечетный цикл и не является двудольным.
            elif level[v] == level[u]:
                return False

    return True

def find_maximum_matching(graph):
    max_matching = nx.max_weight_matching(graph, maxcardinality=True)
    return max_matching


def find_minimum_vertex_cover(graph):
    min_vertex_cover = set()
    for u, v in graph.edges:
        if u not in min_vertex_cover and v not in min_vertex_cover:
            min_vertex_cover.add(u)
            min_vertex_cover.add(v)

    return min_vertex_cover


def hopcroft_karp_max_matching(graph):
    left, right = nx.bipartite.sets(graph)
    matching = nx.bipartite.hopcroft_karp_matching(graph, left)
    max_matching = [(key, matching[key]) for key in matching]
    return max_matching

if __name__ == '__main__':

    # Список ребер Graph
    edges = [(0, 1), (1, 2), (1, 7), (2, 3), (3, 5), (4, 6), (4, 8), (7, 8)]

    # общее количество узлов в Graph (от 0 до 8)
    n = 9

    # строит graph по заданным ребрам
    graph = Graph(edges, n)

    if isBipartite(graph):
        print('Граф двудолен')
    else:
        print('Граф недвудолен')

    # Создаем графический объект из вашего объекта Graph
    G = nx.Graph()
    for i in range(n):
        G.add_node(i)
    G.add_edges_from(edges)

    # Расскрашиваем двудольный граф
    color = bipartite.color(G)
    colors = ['red' if color[node] == 0 else 'blue' for node in G.nodes]

    max_matching = hopcroft_karp_max_matching(G)
    print("Максимальное паросочетание:", max_matching)

    min_vertex_cover = find_minimum_vertex_cover(G)
    print("Минимальное вершинное покрытие:", min_vertex_cover)

    if len(max_matching) == len(min_vertex_cover):
        print('Теорема Кёнига доказана')
    else:
        print('Теорема Кёнига не доказана')

    # Рисуем граф

    # Рисуем граф с расскраской

    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_weight='bold', node_size=500, node_color=colors, font_color='black',
            font_size=10, edge_color='gray', linewidths=1, arrows=True, connectionstyle='arc3,rad=0.1')

    # Добавляем подписи к ребрам
    labels = {(i, j): f"({i},{j})" for i, j in G.edges}
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels, font_color='red', label_pos=0.5)

    # легенду
    red_patch = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Red Nodes')
    blue_patch = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=10, label='Blue Nodes')
    plt.legend(handles=[red_patch, blue_patch], title='Node Colors', loc='upper right')

    # Отображаем граф
    plt.show()